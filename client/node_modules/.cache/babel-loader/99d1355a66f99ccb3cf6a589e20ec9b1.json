{"ast":null,"code":"import _toConsumableArray from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nbeny/Documents/chat-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nbeny/Documents/chat-app/client/src/components/chats/ChatContainer.js\";\nimport React, { Component } from 'react';\nimport SideBar from '../sidebar/SideBar';\nimport { COMMUNITY_CHAT, MESSAGE_SEND, MESSAGE_RECIEVED, TYPING, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER } from '../../Events';\nimport ChatHeading from './ChatHeading';\nimport Messages from '../messages/Messages';\nimport MessageInput from '../messages/MessageInput';\nimport { values, difference, differenceBy } from 'lodash';\n\nvar ChatContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatContainer, _Component);\n\n  function ChatContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ChatContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatContainer).call(this, props));\n\n    _this.sendOpenPrivateMessage = function (reciever) {\n      var _this$props = _this.props,\n          socket = _this$props.socket,\n          user = _this$props.user;\n      var activeChat = _this.state.activeChat;\n      socket.emit(PRIVATE_MESSAGE, {\n        reciever: reciever,\n        sender: user.name,\n        activeChat: activeChat\n      });\n    };\n\n    _this.addUserToChat = function (_ref) {\n      var chatId = _ref.chatId,\n          newUser = _ref.newUser;\n      var chats = _this.state.chats;\n      var newChats = chats.map(function (chat) {\n        if (chat.id === chatId) {\n          return Object.assign({}, chat, {\n            users: [].concat(_toConsumableArray(chat.users), [newUser])\n          });\n        }\n\n        return chat;\n      });\n\n      _this.setState({\n        chats: newChats\n      });\n    };\n\n    _this.removeUsersFromChat = function (removedUsers) {\n      var chats = _this.state.chats;\n      var newChats = chats.map(function (chat) {\n        var newUsers = difference(chat.users, removedUsers.map(function (u) {\n          return u.name;\n        }));\n        return Object.assign({}, {\n          users: newUsers\n        });\n      });\n\n      _this.setState({\n        chats: newChats\n      });\n    };\n\n    _this.resetChat = function (chat) {\n      return _this.addChat(chat, true);\n    };\n\n    _this.addChat = function (chat) {\n      var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var socket = _this.props.socket;\n      var chats = _this.state.chats;\n      var newChats = reset ? [chat] : [].concat(_toConsumableArray(chats), [chat]);\n\n      _this.setState({\n        chats: newChats,\n        activeChat: reset ? chat : _this.state.activeChat\n      });\n\n      var messageEvent = \"\".concat(MESSAGE_RECIEVED, \"-\").concat(chat.id);\n      var typingEvent = \"\".concat(TYPING, \"-\").concat(chat.id);\n      socket.on(typingEvent, _this.updateTypingInChat(chat.id));\n      socket.on(messageEvent, _this.addMessageToChat(chat.id));\n    };\n\n    _this.addMessageToChat = function (chatId) {\n      return function (message) {\n        var chats = _this.state.chats;\n        var newChats = chats.map(function (chat) {\n          if (chat.id === chatId) chat.messages.push(message);\n          return chat;\n        });\n\n        _this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    _this.updateTypingInChat = function (chatId) {\n      return function (_ref2) {\n        var isTyping = _ref2.isTyping,\n            user = _ref2.user;\n\n        if (user !== _this.props.user.name) {\n          var chats = _this.state.chats;\n          var newChats = chats.map(function (chat) {\n            if (chat.id === chatId) {\n              if (isTyping && !chat.typingUsers.includes(user)) {\n                chat.typingUsers.push(user);\n              } else if (!isTyping && chat.typingUsers.includes(user)) {\n                chat.typingUsers = chat.typingUsers.filter(function (u) {\n                  return u !== user;\n                });\n              }\n            }\n\n            return chat;\n          });\n\n          _this.setState({\n            chats: newChats\n          });\n        }\n      };\n    };\n\n    _this.sendMessage = function (chatId, message) {\n      var socket = _this.props.socket;\n      socket.emit(MESSAGE_SEND, {\n        chatId: chatId,\n        message: message\n      });\n    };\n\n    _this.sendTyping = function (chatId, isTyping) {\n      var socket = _this.props.socket;\n      socket.emit(TYPING, {\n        chatId: chatId,\n        isTyping: isTyping\n      });\n    };\n\n    _this.setActiveChat = function (activeChat) {\n      _this.setState({\n        activeChat: activeChat\n      });\n    };\n\n    _this.state = {\n      chats: [],\n      users: [],\n      activeChat: null\n    };\n    return _this;\n  }\n\n  _createClass(ChatContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var socket = this.props.socket;\n      this.initSocket(socket);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var socket = this.props.socket;\n      socket.off(PRIVATE_MESSAGE);\n      socket.off(USER_CONNECTED);\n      socket.off(USER_DISCONNECTED);\n      socket.off(NEW_CHAT_USER);\n    }\n  }, {\n    key: \"initSocket\",\n    value: function initSocket(socket) {\n      var _this2 = this;\n\n      socket.emit(COMMUNITY_CHAT, this.resetChat);\n      socket.on(PRIVATE_MESSAGE, this.addChat);\n      socket.on('connect', function () {\n        socket.emit(COMMUNITY_CHAT, _this2.resetChat);\n      });\n      socket.on(USER_CONNECTED, function (users) {\n        _this2.setState({\n          users: values(users)\n        });\n      });\n      socket.on(USER_DISCONNECTED, function (users) {\n        var removedUsers = differenceBy(_this2.state.users, values(users), 'id');\n\n        _this2.removeUsersFromChat(removedUsers);\n\n        _this2.setState({\n          users: values(users)\n        });\n      });\n      socket.on(NEW_CHAT_USER, this.addUserToChat);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          logout = _this$props2.logout,\n          user = _this$props2.user;\n      var _this$state = this.state,\n          chats = _this$state.chats,\n          activeChat = _this$state.activeChat,\n          users = _this$state.users;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(SideBar, {\n        logout: logout,\n        chats: chats,\n        user: user,\n        users: users,\n        activeChat: activeChat,\n        setActiveChat: this.setActiveChat,\n        onSendPrivateMessage: this.sendOpenPrivateMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat-room-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, activeChat !== null ? React.createElement(\"div\", {\n        className: \"chat-room\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(ChatHeading, {\n        name: activeChat.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: activeChat.messages,\n        user: user,\n        typingUsers: activeChat.typingUsers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(MessageInput, {\n        sendMessage: function sendMessage(message) {\n          _this3.sendMessage(activeChat.id, message);\n        },\n        sendTyping: function sendTyping(isTyping) {\n          _this3.sendTyping(activeChat.id, isTyping);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"chat-room choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Choose a chat!\"))));\n    }\n  }]);\n\n  return ChatContainer;\n}(Component);\n\nexport { ChatContainer as default };","map":{"version":3,"sources":["/Users/nbeny/Documents/chat-app/client/src/components/chats/ChatContainer.js"],"names":["React","Component","SideBar","COMMUNITY_CHAT","MESSAGE_SEND","MESSAGE_RECIEVED","TYPING","PRIVATE_MESSAGE","USER_CONNECTED","USER_DISCONNECTED","NEW_CHAT_USER","ChatHeading","Messages","MessageInput","values","difference","differenceBy","ChatContainer","props","sendOpenPrivateMessage","reciever","socket","user","activeChat","state","emit","sender","name","addUserToChat","chatId","newUser","chats","newChats","map","chat","id","Object","assign","users","setState","removeUsersFromChat","removedUsers","newUsers","u","resetChat","addChat","reset","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","message","messages","push","isTyping","typingUsers","includes","filter","sendMessage","sendTyping","setActiveChat","initSocket","off","logout"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport SideBar from '../sidebar/SideBar'\nimport {COMMUNITY_CHAT, MESSAGE_SEND, MESSAGE_RECIEVED, TYPING, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER} from '../../Events'\nimport ChatHeading from './ChatHeading'\nimport Messages from '../messages/Messages'\nimport MessageInput from '../messages/MessageInput'\nimport {values, difference, differenceBy} from 'lodash'\n\nexport default class ChatContainer extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chats: [],\n            users:[],\n            activeChat: null\n        }\n    }\n\n    componentDidMount() {\n        const {socket} = this.props\n        this.initSocket(socket)\n    }\n\n    componentWillUnmount() {\n        const {socket} = this.props\n        socket.off(PRIVATE_MESSAGE)\n        socket.off(USER_CONNECTED)\n        socket.off(USER_DISCONNECTED)\n        socket.off(NEW_CHAT_USER)\n    }\n\n    initSocket(socket) {\n        socket.emit(COMMUNITY_CHAT, this.resetChat)\n        socket.on(PRIVATE_MESSAGE, this.addChat)\n        socket.on('connect', () => {\n            socket.emit(COMMUNITY_CHAT, this.resetChat)\n        })\n        socket.on(USER_CONNECTED, (users) => {\n            this.setState({users:values(users)})\n        })\n        socket.on(USER_DISCONNECTED, (users) => {\n            const removedUsers = differenceBy(this.state.users, values(users), 'id')\n            this.removeUsersFromChat(removedUsers)\n            this.setState({users:values(users)})\n        })\n        socket.on(NEW_CHAT_USER, this.addUserToChat)\n    }\n\n    sendOpenPrivateMessage = (reciever) => {\n        const {socket, user} = this.props\n        const {activeChat} = this.state\n        socket.emit(PRIVATE_MESSAGE, {reciever, sender:user.name, activeChat})\n    }\n\n    addUserToChat = ({chatId, newUser}) => {\n        const {chats} = this.state\n        const newChats = chats.map((chat) => {\n            if (chat.id === chatId) {\n                return Object.assign({}, chat, {users: [...chat.users, newUser]})\n            }\n            return chat\n        })\n        this.setState({chats:newChats})\n    }\n\n    removeUsersFromChat = removedUsers => {\n        const  {chats} = this.state\n        const newChats = chats.map((chat) => {\n            let newUsers = difference(chat.users, removedUsers.map(u => u.name))\n            return Object.assign({}, {users:newUsers})\n        })\n        this.setState({chats:newChats})\n    }\n\n\t/*\n\t*\tReset the chat back to only the chat passed in.\n\t* \t@param chat {Chat}\n\t*/\n    resetChat = (chat) => {\n        return this.addChat(chat, true)\n    }\n\n\t/*\n\t*\tAdds chat to the chat container, if reset is true removes all chats\n\t*\tand sets that chat to the main chat.\n\t*\tSets the message and typing socket events for the chat.\n\t*\t\n\t*\t@param chat {Chat} the chat to be added.\n\t*\t@param reset {boolean} if true will set the chat as the only chat.\n    */\n    addChat = (chat, reset = false) => {\n        const {socket} = this.props\n        const {chats} = this.state\n\n        const newChats = reset ? [chat] : [...chats, chat]\n        this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\n\n        const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\n        const typingEvent = `${TYPING}-${chat.id}`\n\n        socket.on(typingEvent, this.updateTypingInChat(chat.id))\n        socket.on(messageEvent, this.addMessageToChat(chat.id))\n    }\n\n\t/*\n\t* \tReturns a function that will \n\t*\tadds message to chat with the chatId passed in. \n\t*\n\t* \t@param chatId {number}\n\t*/\n    addMessageToChat = (chatId) => {\n        return message => {\n            const {chats} = this.state\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId)\n                    chat.messages.push(message)\n                return chat\n            })\n            this.setState({chats:newChats})\n        }\n    }\n\n    /*\n\t*\tUpdates the typing of chat with id passed in.\n\t*\t@param chatId {number}\n\t*/\n    updateTypingInChat = (chatId) => {\n\t\treturn ({isTyping, user})=>{\n\t\t\tif(user !== this.props.user.name){\n\n\t\t\t\tconst { chats } = this.state\n\n\t\t\t\tlet newChats = chats.map((chat)=>{\n\t\t\t\t\tif(chat.id === chatId){\n\t\t\t\t\t\tif(isTyping && !chat.typingUsers.includes(user)){\n\t\t\t\t\t\t\tchat.typingUsers.push(user)\n\t\t\t\t\t\t}else if(!isTyping && chat.typingUsers.includes(user)){\n\t\t\t\t\t\t\tchat.typingUsers = chat.typingUsers.filter(u => u !== user)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn chat\n\t\t\t\t})\n\t\t\t\tthis.setState({chats:newChats})\n\t\t\t}\n        }\n    }\n\n\t/*\n\t*\tAdds a message to the specified chat\n\t*\t@param chatId {number}  The id of the chat to be added to.\n\t*\t@param message {string} The message to be added to the chat.\n\t*/\n    sendMessage = (chatId, message) => {\n        const {socket} = this.props\n        socket.emit(MESSAGE_SEND, {chatId, message})\n    }\n\n\t/*\n\t*\tSends typing status to server.\n\t*\tchatId {number} the id of the chat being typed in.\n\t*\ttyping {boolean} If the user is typing still or not.\n\t*/\n    sendTyping = (chatId, isTyping) => {\n        const {socket} = this.props\n        socket.emit(TYPING, {chatId, isTyping})\n    }\n\n    setActiveChat = (activeChat) => {\n        this.setState({activeChat})\n    }\n\n    render() {\n        const {logout, user} = this.props\n        const {chats, activeChat, users} = this.state\n        return (\n            <div className=\"container\">\n                <SideBar\n                    logout={logout}\n                    chats={chats}\n                    user={user}\n                    users={users}\n                    activeChat={activeChat}\n                    setActiveChat={this.setActiveChat}\n                    onSendPrivateMessage={this.sendOpenPrivateMessage}\n                    />\n                <div className=\"chat-room-container\">\n                {\n                    activeChat !== null ? (\n                        <div className=\"chat-room\">\n                            <ChatHeading name={activeChat.name} />\n                            <Messages\n                                messages={activeChat.messages}\n                                user={user}\n                                typingUsers={activeChat.typingUsers}/>\n                            <MessageInput\n                                sendMessage= {\n                                    (message) => {\n                                        this.sendMessage(activeChat.id, message)\n                                    }\n                                }\n                                sendTyping = {\n                                    (isTyping) => {\n                                        this.sendTyping(activeChat.id, isTyping)\n                                    }\n                                }/>\n                        </div>\n                    ) :\n                    <div className=\"chat-room choose\">\n                        <h3>Choose a chat!</h3>\n                    </div>\n                }\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}